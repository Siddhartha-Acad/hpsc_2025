You have to write a Python program to estimate the value of pi using a Monte Carlo simulation 

This is how the Monte Carlo method works:

Your program should generate a large number of random points within a unit square centered at the origin. It should then count the number of points that fall within a circle of radius 0.5 centred at the origin. The ratio of the number of points in the circle to the total number of points in the square will converge to the ratio of the area of the circle to the area of the square (which is equal to pi/4) as the number of points increases. 

To solve this problem, you will need to use the Pythagorean theorem to check whether each point falls within the circle. You can use the random module of Python to generate random points. For instance, the statement x = random.uniform(-0.5,0.5) will generate a number x randomly between the coordinates -0.5 and 0.5. Similarly, y = random.uniform(-0.5,0.5) will generate another number y randomly in the same range. The point (x,y) then becomes a random point in the unit square. 

For example, suppose you generate 10,000 random points within the unit square centred at the origin. You count 7,854 points that fall within the circle of radius 0.5 centred at the origin. The ratio of the number of points in the circle to the total number of points is 0.7854, which is approximately equal to pi/4. Therefore, your estimate of pi is 4 * 0.7854 = 3.1416.

All your work must be included in one file named monte_carlo_pi.py

Proceed as follows:

Write a Python function called monte_carlo_pi(num_points) that takes the number of points as an argument and returns the pi estimate using the Monte Carlo method. 
Write a function test_pi() that calls the monte_carlo_pi() for a list of values of the number of points ranging between 100 and 10^6. Print the estimate for each value. In addition, include an assert statement to check that your estimate is within 20% of the actual value of pi. 
In the code, include a check for the __name__ private variable so that the test function is called when the Python script is run from shell. 
Create a Makefile with two targets - (1) output.txt that is generated by running monte_carlo_pi.py with the output redirected into output.txt. (2) A second phony target called clobber that deletes output.txt
Commenting the working code. 
Write a different pi_estimate.py script that can be invoked from the terminal as 'python3 pi_estimate.py 1000' which prints on the terminal the estimate of pi generated for 1000 points using the Monte Carlo method.
Include a default argument in the test_pi() function called plot_it that is False by default. If it is True, then it should plot a graph with the pi_estimate on the y-axis and number of points on the x-axis. 